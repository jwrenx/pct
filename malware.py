#!/usr/bin/env python3

import socket
import sys
import os
import platform
import urllib3
import re
import hashlib
import base64
from random import randint

url = 'aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2p3cmVueC9wY3QvbWFzdGVyL3VuRW5jcnlwdGVkLnR4dA=='
hash_handle = hashlib.sha256()
ticket = ""
HOST = ""
PORT =  1025 #randint(1024, 65000)

def get_raw_flag():
    http = urllib3.PoolManager()
    content = []
    req = http.request("GET", base64.b64decode(url.encode('ascii')).decode('ascii'), preload_content=False)
    for chunk in req.stream(32):
        content.append(chunk.decode('ascii'))
    req.release_conn()
    return content

def get_os_info():
    os = platform.system()
    version = platform.release()
    target = socket.gethostname()
    ip_addr = socket.gethostbyname(target)
    return os, version, target, ip_addr

def server():
    ticket = get_flag()
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST, PORT))
        s.listen()
        connection, addr = s.accept()
        with connection:
            print("[*] Incoming connection from: {}".format(addr))
            while True:
                data = connection.recv(1024)
                if not data:
                    break
                elif data == b"IAS211":
                    connection.sendall(ticket)
                else:
                    pass

def to_string(a):
    concat = ""
    raw_flag = ""
    flag = ""
    for item in a:
        concat += item
    raw_flag = re.sub("[^A-Za-z0-9]+", "", concat)
    for index, letter in enumerate(raw_flag):
        if index % 64 == 0:
            flag += letter
    hash_handle.update(flag.encode())
    return hash_handle.hexdigest()

def get_flag():
    ticket = ""
    os, version, host_system_name, ip_addr = get_os_info()
    if 'W' in os:
        raw = get_raw_flag()
        if raw:
            ticket = to_string(raw)
    return ticket.encode()

def main():
    server()


if __name__ == "__main__":
    main()    
